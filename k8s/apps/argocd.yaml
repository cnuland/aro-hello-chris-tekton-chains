apiVersion: argoproj.io/v1alpha1
kind: ArgoCD
metadata:
  annotations:
    argocd.argoproj.io/sync-options: Validate=false,ServerSideApply=true
    argocd.argoproj.io/sync-wave: "0"
  name: openshift-gitops
  namespace: openshift-gitops
spec:
  resourceHealthChecks:
  - group: kyverno.io
    kind: ClusterPolicy
    check: |
      health_status = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          numDegraded = 0
          numReady = 0
          msg = ""
          for i, condition in pairs(obj.status.conditions) do
            msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
            if condition.type == "Ready" and condition.status == "True" then
              numReady = numReady + 1
            end
          end
          if numDegraded == 0 and numReady >= 1 then
            health_status.status = "Healthy"
            health_status.message = msg
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "Waiting for ClusterPolicy to be available"
      return health_status

  - group: argoproj.io
    kind: Application
    check: |
      hs = {}
      hs.status = "Progressing"
      hs.message = ""
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          hs.status = obj.status.conditions.status
          hs.message = obj.status.conditions.message
        end
      end
      return hs
  - group: operators.coreos.com
    kind: Subscription
    check: |
      health_status = {}
      if obj.status ~= nil then
        if obj.status.conditions ~= nil then
          numDegraded = 0
          numPending = 0
          msg = ""
          for i, condition in pairs(obj.status.conditions) do
            msg = msg .. i .. ": " .. condition.type .. " | " .. condition.status .. "\n"
            if condition.type == "InstallPlanPending" and condition.status == "True" then
              numPending = numPending + 1
            elseif (condition.type == "InstallPlanMissing" and condition.reason ~= "ReferencedInstallPlanNotFound") then
              numDegraded = numDegraded + 1
            elseif (condition.type == "CatalogSourcesUnhealthy" or condition.type == "InstallPlanFailed" or condition.type == "ResolutionFailed") and condition.status == "True" then
              numDegraded = numDegraded + 1
            end
          end
          if numDegraded == 0 and numPending == 0 then
            health_status.status = "Healthy"
            health_status.message = msg
            return health_status
          elseif numPending > 0 and numDegraded == 0 then
            health_status.status = "Progressing"
            health_status.message = "An install plan for a subscription is pending installation"
            return health_status
          else
            health_status.status = "Degraded"
            health_status.message = msg
            return health_status
          end
        end
      end
      health_status.status = "Progressing"
      health_status.message = "An install plan for a subscription is pending installation"
      return health_status